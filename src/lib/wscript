#
#    Copyright (C) 2012-2015 Carl Hetherington <cth@carlh.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

import os
import i18n

sources = """
          analyse_audio_job.cc
          audio_analysis.cc
          audio_buffers.cc
          audio_content.cc
          audio_decoder.cc
          audio_decoder_stream.cc
          audio_delay.cc
          audio_filter.cc
          audio_filter_graph.cc
          audio_mapping.cc
          audio_point.cc
          audio_processor.cc
          audio_stream.cc
          cinema.cc
          cinema_kdms.cc
          cinema_sound_processor.cc
          colour_conversion.cc
          config.cc
          content.cc
          content_factory.cc
          cross.cc
          curl_uploader.cc
          dcp_content.cc
          dcp_content_type.cc
          dcp_decoder.cc
          dcp_examiner.cc
          dcp_subtitle.cc
          dcp_subtitle_content.cc
          dcp_subtitle_decoder.cc
          dcp_video.cc
          dcpomatic_socket.cc
          dcpomatic_time.cc
          dolby_cp750.cc
          emailer.cc
          encoder.cc
          encode_server.cc
          encode_server_finder.cc
          encoded_log_entry.cc
          environment_info.cc
          examine_content_job.cc
          exceptions.cc
          file_group.cc
          file_log.cc
          filter_graph.cc
          ffmpeg.cc
          ffmpeg_audio_stream.cc
          ffmpeg_content.cc
          ffmpeg_decoder.cc
          ffmpeg_examiner.cc
          ffmpeg_stream.cc
          ffmpeg_subtitle_stream.cc
          film.cc
          filter.cc
          font.cc
          font_files.cc
          frame_rate_change.cc
          internet.cc
          image.cc
          image_content.cc
          image_decoder.cc
          image_examiner.cc
          image_proxy.cc
          isdcf_metadata.cc
          j2k_image_proxy.cc
          job.cc
          job_manager.cc
          json_server.cc
          log.cc
          log_entry.cc
          magick_image_proxy.cc
          md5_digester.cc
          mid_side_decoder.cc
          player.cc
          player_subtitles.cc
          player_video.cc
          playlist.cc
          position_image.cc
          ratio.cc
          raw_image_proxy.cc
          reel_writer.cc
          render_subtitles.cc
          resampler.cc
          safe_stringstream.cc
          scoped_temporary.cc
          scp_uploader.cc
          screen.cc
          screen_kdm.cc
          send_kdm_email_job.cc
          send_problem_report_job.cc
          single_stream_audio_content.cc
          sndfile_base.cc
          sndfile_content.cc
          sndfile_decoder.cc
          sndfile_examiner.cc
          string_log_entry.cc
          subrip.cc
          subrip_content.cc
          subrip_decoder.cc
          subtitle_content.cc
          subtitle_decoder.cc
          timer.cc
          transcode_job.cc
          transcoder.cc
          types.cc
          signal_manager.cc
          update_checker.cc
          upload_job.cc
          uploader.cc
          upmixer_a.cc
          upmixer_b.cc
          util.cc
          video_content.cc
          video_content_scale.cc
          video_decoder.cc
          video_filter_graph.cc
          writer.cc
          """

def build(bld):
    if bld.env.STATIC_DCPOMATIC:
        obj = bld(features = 'cxx cxxstlib')
    else:
        obj = bld(features = 'cxx cxxshlib')

    obj.name = 'libdcpomatic2'
    obj.export_includes = ['..']
    obj.uselib = """
                 AVCODEC AVUTIL AVFORMAT AVFILTER SWSCALE
                 BOOST_FILESYSTEM BOOST_THREAD BOOST_DATETIME BOOST_SIGNALS2 BOOST_REGEX
                 SNDFILE SAMPLERATE POSTPROC TIFF MAGICK SSH DCP CXML GLIB LZMA XML++
                 CURL ZIP FONTCONFIG PANGOMM CAIROMM XMLSEC SUB ICU
                 """

    if bld.env.TARGET_OSX:
        obj.framework = ['IOKit', 'Foundation']

    obj.source = sources + ' version.cc'

    if bld.env.TARGET_WINDOWS:
        obj.uselib += ' WINSOCK2 BFD DBGHELP IBERTY SHLWAPI MSWSOCK BOOST_LOCALE'
    if bld.env.STATIC_DCPOMATIC:
        obj.uselib += ' XMLPP'

    obj.target = 'dcpomatic2'

    i18n.po_to_mo(os.path.join('src', 'lib'), 'libdcpomatic2', bld)

def pot(bld):
    i18n.pot(os.path.join('src', 'lib'), sources, 'libdcpomatic')

def pot_merge(bld):
    i18n.pot_merge(os.path.join('src', 'lib'), 'libdcpomatic')
